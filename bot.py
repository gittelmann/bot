import os, logging, asyncio
from datetime import datetime
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = None

def parse_rada():
    url = "https://zakon.rada.gov.ua/laws/latest"
    resp = requests.get(url)
    soup = BeautifulSoup(resp.text, "html.parser")
    items = soup.select(".law-item")[:5]
    res = []
    for it in items:
        title = it.select_one(".title").get_text(strip=True)
        href = "https://zakon.rada.gov.ua" + it.a["href"]
        date = it.select_one(".date").get_text(strip=True)
        if any(w in title.lower() for w in ["–æ–±–æ—Ä–æ–Ω", "–≤—ñ–π—Å—å–∫"]):
            res.append((title, href, date))
    return res

def parse_liga():
    res = {"defense": [], "energy": []}
    for tag, cat in [("oboronna", "defense"), ("vidnovlyuvana-energetika", "energy")]:
        url = f"https://www.liga.net/ua/tag/{tag}"
        resp = requests.get(url)
        soup = BeautifulSoup(resp.text, "html.parser")
        for el in soup.select(".news-list .title")[:3]:
            t = el.get_text(strip=True)
            l = el.a["href"]
            res[cat].append((t, l))
    return res

def build_digest():
    lines = ["üì∞ *–î–∞–π–¥–∂–µ—Å—Ç —Ç–∏–∂–Ω—è ‚Äî –û–±–æ—Ä–æ–Ω–∫–∞ —Ç–∞ –ó–µ–ª–µ–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è*\n"]
    rada = parse_rada()
    if rada:
        lines.append("‚öôÔ∏è *–û–±–æ—Ä–æ–Ω–Ω–∞ –ø—Ä–æ–º–∏—Å–ª–æ–≤—ñ—Å—Ç—å (–í–†):*")
        for t, l, d in rada:
            lines.append(f"‚Ä¢ {t} ({d})\n    üìå [–î–∂–µ—Ä–µ–ª–æ]({l})")
    liga = parse_liga()
    if liga["defense"]:
        lines.append("\nüõ° *–û–±–æ—Ä–æ–Ω–∫–∞ (liga.net):*")
        for t, l in liga["defense"]:
            lines.append(f"‚Ä¢ {t}\n    üìå [–î–∂–µ—Ä–µ–ª–æ]({l})")
    if liga["energy"]:
        lines.append("\nüå± *–í—ñ–¥–Ω–æ–≤–ª—é–≤–∞–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è (liga.net):*")
        for t, l in liga["energy"]:
            lines.append(f"‚Ä¢ {t}\n    üìå [–î–∂–µ—Ä–µ–ª–æ]({l})")
    lines.append("\n–ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äî —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫.")
    return "\n".join(lines)

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ—Ç—å—Å—è –¥–∞–π–¥–∂–µ—Å—Ç.")
    logging.info(f"Activated chat_id={CHAT_ID}")

async def send_digest(bot: Bot):
    if CHAT_ID:
        text = build_digest()
        await bot.send_message(chat_id=CHAT_ID, text=text,
                               parse_mode="Markdown", disable_web_page_preview=True)
        logging.info("Digest sent")
    else:
        logging.warning("No CHAT_ID registered")

async def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(lambda: asyncio.create_task(send_digest(app.bot)),
                      trigger="cron", day_of_week="mon", hour=9, minute=0)
    scheduler.start()

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
